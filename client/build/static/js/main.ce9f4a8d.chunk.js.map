{"version":3,"sources":["components/Banner.js","components/SortingButtons.js","components/AnswerForm.js","components/AnswerContent.js","components/NewQuestionForm.js","components/AllQuestionList.js","components/TagResults.js","components/TagsContent.js","components/Searching.js","components/WelcomePage.js","components/LoginForm.js","components/RegisterForm.js","components/UserProfilePage.js","components/fakestackoverflow.js","App.js","index.js"],"names":["Banner","_ref","isLoggedIn","activeContent","setSearchResults","setActiveContent","onLogoutSuccess","searchTerm","setSearchTerm","useState","isLogoutDisabled","isSearchDisabled","React","createElement","className","onClick","async","Cookies","remove","fetch","method","ok","error","console","disabled","type","id","placeholder","value","onChange","e","target","onKeyUp","event","key","trim","trimmedSearchTerm","response","concat","encodeURIComponent","data","json","log","SortingButtons","setSortedQuestions","fetchSortedQuestions","sortType","Error","status","AnswerForm","questionId","onAnswerSubmit","formData","setFormData","answerText","username","errorMessages","setErrorMessages","answerTextError","usernameError","formError","displayError","fieldId","message","prevState","[object Object]","handleInputChange","name","onSubmit","preventDefault","headers","Content-Type","body","JSON","stringify","text","ans_by","alert","htmlFor","AnswerContent","question","onAskQuestionClick","answers","setAnswers","displayAnswerForm","setDisplayAnswerForm","displayAnswerContent","setDisplayAnswerContent","transformTextToHtml","index","transformedText","lastIndex","length","indexOf","substring","closingBracketIndex","openParenthesisIndex","closeParenthesisIndex","linkText","linkUrl","startsWith","AnswerDiv","_ref2","answer","style","width","tableLayout","overflowWrap","dangerouslySetInnerHTML","__html","textAlign","date","diff","Date","seconds","Math","floor","minutes","hours","days","toLocaleString","month","day","year","toLocaleTimeString","formatMetadata","ans_date_time","useEffect","title","views","colSpan","map","_id","handleAskAnswerClick","NewQuestionForm","addQuestionToList","onSuccess","userEmail","get","email","questionTitle","questionSummary","questionText","questionTags","questionTitleError","questionSummaryError","questionTextError","questionTagsError","questionsLinkClass","tagsLinkClass","href","handleQuestionsLinkClick","handleTagsLinkClick","data-hint","autoComplete","required","readOnly","tagArray","split","filter","tag","isValid","linkContent","array","Set","size","hasDuplicates","summary","tagNames","asked_by","newQuestion","AllQuestionList","questions","setQuestions","selectedQuestion","setSelectedQuestion","displayNewQuestionForm","setDisplayNewQuestionForm","currentPage","setCurrentPage","totalPages","ceil","fetchQuestions","handleAskQuestionClick","displayedQuestions","slice","minHeight","prevQuestions","Fragment","sortedQuestions","overflowY","_question$answers","_question$tags","handleClickOnQuestion","display","alignItems","paddingRight","marginLeft","ask_date_time","tags","paddingTop","handlePrevClick","handleNextClick","TagResults","tagName","fetchQuestionsByTag","Tags","setTags","selectedTag","setSelectedTag","displayTagResult","setDisplayTagResult","fetchedTags","fetchTags","count","Searching","searchResults","fetchSearchResults","WelcomePage","LoginForm","onLoginSuccess","setEmail","password","setPassword","setError","handleBackClick","errorData","token","set","expires","path","color","RegisterForm","onRegisterSuccess","firstName","lastName","passwordVerification","handleChange","prevData","validationError","validateForm","match","includes","UserProfilePage","userId","setSelectedAnswer","user","setUser","fetchUserProfile","hasQuestions","hasTags","hasAnswers","createdAt","reputation","q","handleDeleteQuestion","t","tagId","prevTags","handleDeleteTag","a","answerId","prevAnswers","handleDeleteAnswer","FakeStackOverflow","setIsLoggedIn","isLoggedOut","setIsLoggedOut","handleLoginSuccess","handleRegisterSuccess","handleLogoutSuccess","renderContent","UserProfile","Answers","TagsContent","LoginPage","RegisterPage","App","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.ce9f4a8d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Cookies from 'js-cookie';\n\nfunction Banner({ isLoggedIn, activeContent, setSearchResults, setActiveContent, onLogoutSuccess }) {\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const handleLogout = async () => {\n    if (!isLoggedIn) {\n      // If user is in guest mode, just switch to the WelcomePage without server request\n      setActiveContent('WelcomePage');\n      return;\n    }\n    try {\n      // Clear JWT token stored in cookies\n      Cookies.remove('authToken'); // Change from 'userSession' to 'authToken'\n      Cookies.remove('userEmail'); // Remove user email\n      \n      // Call the server-side endpoint for logout, if needed\n      const response = await fetch('/api/logout', { method: 'POST' });\n      if (response.ok) {\n        // Notify the parent component that logout was successful\n        onLogoutSuccess(); \n      }\n    } catch (error) {\n      console.error('Logout failed:', error);\n    }\n  };\n\n  const handleSearch = async (event) => {\n    if (event.key === 'Enter' && searchTerm.trim()) {\n      const trimmedSearchTerm = searchTerm.trim();\n      try {\n        const response = await fetch(`/api/search?searchTerm=${encodeURIComponent(trimmedSearchTerm)}`);\n        if (response.ok) {\n          const data = await response.json();\n          setSearchResults(data); // Pass results to parent state\n          console.log(data)\n          setActiveContent('Searching'); // Switch to search results page\n        } else {\n          console.error('Failed to fetch search results');\n        }\n      } catch (error) {\n        console.error('Error during search:', error);\n      }\n    }\n  };\n\n  const isLogoutDisabled = activeContent === 'Login' || activeContent === 'Register';\n\n  // Disable search and logout based on active content\n  const isSearchDisabled =\n  activeContent === 'WelcomePage' || activeContent === 'Login' || activeContent === 'Register';\n\n  return (\n    <div className=\"banner\">\n      <div>\n      {/* User Profile button, visible only if logged in */}\n      {isLoggedIn && (\n        <button\n          onClick={() => setActiveContent('UserProfile')} // Change active content to user profile\n          className=\"blue-button\"\n        >\n          User Profile\n        </button>\n      )}\n      <button onClick={handleLogout} className=\"blue-button\" disabled={isLogoutDisabled}>Logout</button> {/* Logout button */}\n      </div>\n      <h1>Fake Stack Overflow</h1>\n      <input\n        type=\"text\"\n        id=\"searchBar\"\n        className=\"searchBar\"\n        placeholder=\"Search...\"\n        value={searchTerm}\n        onChange={(e) => setSearchTerm(e.target.value)}\n        onKeyUp={handleSearch} \n        disabled={isSearchDisabled} \n      />\n    </div>\n  );\n}\n\nexport default Banner;","import React from 'react';\n\nfunction SortingButtons({ setSortedQuestions }) {\n  const fetchSortedQuestions = async (sortType) => {\n    try {\n      const response = await fetch(`/api/sorting?sort=${sortType}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json(); // Parse the JSON data\n      setSortedQuestions(data); // Update the question list with sorted data\n    } catch (error) {\n      console.error('Failed to fetch and sort questions:', error);\n    }\n  };\n\n  return (\n    <div className=\"button-group\">\n      <button onClick={() => fetchSortedQuestions('newest')} className=\"sorting-button\">Newest</button>\n      <button onClick={() => fetchSortedQuestions('active')} className=\"sorting-button\">Active</button>\n      <button onClick={() => fetchSortedQuestions('unanswered')} className=\"sorting-button\">Unanswered</button>\n    </div>\n  );\n}\n\nexport default SortingButtons;\n","import React, { useState } from 'react';\nimport AnswerContent from './AnswerContent';\n\nfunction AnswerForm({ questionId, onAnswerSubmit }) {\n    const [formData, setFormData] = useState({\n        answerText: '',\n        username: ''\n    });\n\n    const [errorMessages, setErrorMessages] = useState({\n        answerTextError: '',\n        usernameError: '',\n        formError: ''\n    });\n\n    const displayError = (fieldId, message) => {\n        setErrorMessages(prevState => ({\n            ...prevState,\n            [fieldId]: prevState[fieldId] ? `${prevState[fieldId]}\\n${message}` : message\n        }));\n    };\n\n    const clearErrorMessages = () => {\n        setErrorMessages({\n            answerTextError: '',\n            usernameError: '',\n            formError: ''\n        });\n    };\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        clearErrorMessages();\n        const { answerText, username } = formData;\n\n        if (!answerText.trim() || !username.trim()) {\n            displayError('formError', 'Answer text and username are required.');\n            return;\n        }\n\n        if (answerText.trim() === '') {\n            displayError('answerTextError', 'Answer text cannot be empty');\n            return;\n        }\n        if (username.trim() === '') {\n            displayError('usernameError', 'Username cannot be empty');\n            return;\n        }\n\n        try {\n            const response = await fetch(`/api/questions/${questionId}/answers`, {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ text: answerText, ans_by: username})\n            });\n\n            if (!response.ok) {\n                throw new Error(`HTTP error! status: ${response.status}`);\n            } else {\n                onAnswerSubmit();\n                setFormData({ answerText: '', username: '' });\n            }\n        } catch (error) {\n            console.error('Failed to post answer:', error);\n            alert('Failed to post the answer. Please try again.');\n        }\n    };\n\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    };\n\n    return (\n        <div className=\"answer-form\">\n            <h2>Post Your Answer:</h2>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-container\">\n                    <div className=\"form-field\">\n                        <label htmlFor=\"username\">Username*</label>\n                        <input\n                            type=\"text\"\n                            name=\"username\"\n                            value={formData.username}\n                            onChange={handleInputChange}\n                            placeholder=\"Enter your username\"\n                        />\n                        <p className=\"error-message\">{errorMessages.usernameError}</p>\n                    </div>\n                    <div className=\"form-field\">\n                        <label htmlFor=\"answerText\">Answer Text*</label>\n                        <input\n                            type=\"text\"\n                            name=\"answerText\"\n                            value={formData.answerText}\n                            onChange={handleInputChange}\n                            placeholder=\"Add details\"\n                        />\n                        <p className=\"error-message\">{errorMessages.answerTextError}</p>\n                    </div>\n                    <p className=\"error-message\">{errorMessages.formError}</p>\n                    <div className=\"form-field\">\n                        <button type=\"submit\" className='blue-button'>Post Answer</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default AnswerForm;\n\n","\nimport React, { useEffect, useState } from 'react';\nimport formatMetadata from './AllQuestionList';\nimport handleAskQuestionClick from './AllQuestionList';  \nimport AllQuestionList from './AllQuestionList'; \nimport AnswerForm from './AnswerForm'; \n\nfunction AnswerContent({ question, onAskQuestionClick }) {\n  const [answers, setAnswers] = useState([]);\n  const [displayAnswerForm, setDisplayAnswerForm] = useState(false);\n  const [displayAnswerContent, setDisplayAnswerContent] = useState(true);\n\n  useEffect(() => {\n    if (question && question.answers) {\n      setAnswers(question.answers);\n    }\n  }, [question]);\n  \n\n  const handleAskAnswerClick = () => {\n    setDisplayAnswerForm(true);\n    setDisplayAnswerContent(false); \n  };\n\n  // uh this is supposed to close the form but ijdkidjiorfkjmiokj\n  const handleCloseForm = () => {\n    setDisplayAnswerForm(false);\n    setDisplayAnswerContent(true); \n  };\n\n  function formatMetadata(date) {\n    const currentDate = new Date();\n    const diff = currentDate - date;\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    if (days >= 365) {\n      return `${date.toLocaleString('en-us', { month: 'short', day: 'numeric', year: 'numeric' })} at ${date.toLocaleTimeString('en-us')}`;\n    } else if (days >= 1) {\n      return `${date.toLocaleString('en-us', { month: 'short', day: 'numeric' })} at ${date.toLocaleTimeString('en-us')}`;\n    } else if (hours >= 1) {\n      return `${hours} hours ago`;\n    } else if (minutes >= 1) {\n      return `${minutes} minutes ago`;\n    } else {\n      return `${seconds} seconds ago`;\n    }\n  }\n\n  function transformTextToHtml(text) {\n    let index = 0;\n    let transformedText = '';\n    let lastIndex = 0;\n  \n    while (index < text.length) {\n      index = text.indexOf('[', index);\n      if (index === -1) {\n        transformedText += text.substring(lastIndex);  \n        break;\n      }\n  \n      transformedText += text.substring(lastIndex, index);\n  \n      const closingBracketIndex = text.indexOf(']', index);\n      const openParenthesisIndex = text.indexOf('(', closingBracketIndex);\n      const closeParenthesisIndex = text.indexOf(')', openParenthesisIndex);\n  \n      if (closingBracketIndex === -1 || openParenthesisIndex !== closingBracketIndex + 1 || closeParenthesisIndex === -1) {\n        transformedText += text.substring(index);\n        break;\n      }\n  \n      const linkText = text.substring(index + 1, closingBracketIndex);\n      const linkUrl = text.substring(openParenthesisIndex + 1, closeParenthesisIndex).trim();\n  \n      if (!linkUrl.startsWith(\"http://\") && !linkUrl.startsWith(\"https://\")) {\n        transformedText += `[${linkText}](${linkUrl})`;\n      } else {\n        transformedText += `<a href=\"${linkUrl}\" target=\"_blank\" rel=\"noopener noreferrer\">${linkText}</a>`;\n      }\n      index = closeParenthesisIndex + 1;\n      lastIndex = index;\n    }\n    return transformedText;\n  }\n  function AnswerDiv({ answer }) {\n    return (\n        <table className=\"question-entry\" style={{ width: '100%', tableLayout: 'fixed' }}>\n          <tbody>\n            <tr>\n              <td style={{ width: '70%', overflowWrap: 'break-word' }}>\n              <div dangerouslySetInnerHTML={{ __html: transformTextToHtml(answer.text) }} />\n              </td>\n              <td style={{ width: '30%', overflowWrap: 'break-word', textAlign: 'right' }}>\n                <div>\n                  <p className=\"green-text\">{answer.ans_by}</p>\n                  <p className=\"grey-text\">answered {formatMetadata(answer.ans_date_time)}</p>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n    );\n  }\n\n  return (\n    <div>\n      <table className=\"question-entry\" style={{ width: '100%', tableLayout: 'fixed' }}>\n        <tbody>\n          <tr>\n            <td style={{ width: '20%' }}>Answers: {answers.length}</td>\n            <td style={{ width: '60%' }}><h2>{question.title}</h2></td>\n            <td style={{ width: '20%', textAlign: 'right' }}>\n              <button id=\"askQuestionBtn\" className=\"blue-button\" onClick={onAskQuestionClick}>Ask Question</button>\n            </td>\n          </tr>\n          <tr>\n            <td>Views: {question.views}</td>\n            <td colSpan=\"2\"><div dangerouslySetInnerHTML={{ __html: transformTextToHtml(question.text) }} /></td>\n          </tr>\n          {answers.map((answer, index) => (\n            <AnswerDiv key={index} answer={answer} />\n          ))}\n        </tbody>\n      </table>\n      {displayAnswerForm && (\n        <AnswerForm \n          questionId={question._id}\n          onAnswerSubmit={() => {\n            setDisplayAnswerForm(false);\n          }} \n        />\n      )}\n      <div>\n        <button id=\"askAnswerBtn\" className=\"blue-button\" onClick={handleAskAnswerClick}>Answer Question</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AnswerContent;\n\n\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport AllQuestionList from './AllQuestionList';\nimport Cookies from 'js-cookie';\n\nfunction NewQuestionForm({ addQuestionToList, onSuccess, setActiveContent }) {\n  const userEmail = Cookies.get('userEmail'); // Retrieve user email from cookies\n  \n  useEffect(() => {\n    if (userEmail) {\n      setFormData((prevState) => ({\n        ...prevState,\n        email: userEmail // Set the email field in the form data\n      }));\n    }\n  }, [userEmail]);\n\n  const [formData, setFormData] = useState({\n    questionTitle: '',\n    questionSummary: '',\n    questionText: '',\n    questionTags: '',\n    username: userEmail\n  });\n\n  const [errorMessages, setErrorMessages] = useState({\n    questionTitleError: '', \n    questionSummaryError: '',\n    questionTextError: '',\n    questionTagsError: '',\n    usernameError: '',\n    formError: ''\n  });\n  \n  const displayError = (fieldId, message) => {\n    setErrorMessages(prevState => ({\n      ...prevState,\n      [fieldId]: prevState[fieldId] ? `${prevState[fieldId]}\\n${message}` : message\n    }));\n  };\n\n  const clearErrorMessages = () => {\n    setErrorMessages({\n      questionTitleError: '',\n      questionSummaryError: '',\n      questionTextError: '',\n      questionTagsError: '',\n      usernameError: '',\n      formError: ''\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const { id, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [id]: value\n    }));\n  };\n\n  // handle posting a new question\n  const handlePostQuestion = async () => {\n    clearErrorMessages();\n    const { questionTitle, questionSummary, questionText, questionTags, username } = formData;\n    const tagArray = questionTags.split(' ').filter(tag => tag); \n\n    if (questionTitle === '' && questionSummary === '' && questionText === '' && questionTags === '' && username === '') {\n      displayError('formError', 'Please fill in all required fields.');\n      return;\n    }\n    let isValid = true;\n    // Hyperlink validation logic /////////////////////////////////// opejocdjoe\n    let index = 0;\n    while (index < questionText.length) {\n      index = questionText.indexOf('[', index);\n      if (index === -1) break;  // No more '[' found\n\n      const closingBracketIndex = questionText.indexOf(']', index);\n      if (closingBracketIndex === -1) {\n        displayError('questionTextError', 'Missing closing bracket for a link.');\n        isValid = false;\n        break;\n      }\n\n      const openParenthesisIndex = questionText.indexOf('(', closingBracketIndex);\n      if (openParenthesisIndex !== closingBracketIndex + 1) {\n        displayError('questionTextError', 'Missing opening parenthesis for a link after the closing bracket.');\n        isValid = false;\n        break;\n      }\n\n      const closeParenthesisIndex = questionText.indexOf(')', openParenthesisIndex);\n      if (closeParenthesisIndex === -1) {\n        displayError('questionTextError', 'Missing closing parenthesis for a link.');\n        isValid = false;\n        break;\n      }\n\n      const linkContent = questionText.substring(openParenthesisIndex + 1, closeParenthesisIndex).trim();\n      if (!linkContent.startsWith(\"http://\") && !linkContent.startsWith(\"https://\")) {\n        displayError('questionTextError', 'URL must begin with \"http://\" or \"https://\".');\n        isValid = false;\n        break;\n      }\n      index = closeParenthesisIndex + 1;\n    }\n    ////////////////////////////////////// jeoci jdeoi j\n    if (questionSummary === '') {\n      displayError('questionSummaryError', 'Question summary cannot be empty');\n      isValid = false;\n    } else if (questionSummary.length > 200) { // Summary character limit\n      displayError('questionSummaryError', 'Question summary must be 200 characters or less');\n      isValid = false;\n    }\n\n    if (questionTitle === '' || questionTitle.length > 100) {\n      displayError('questionTitleError', 'Title must be between 1 and 100 characters');\n      isValid = false;\n    }\n    \n    if (questionText === '') {\n      displayError('questionTextError', 'Question text cannot be empty');\n      isValid = false;\n    }\n\n    if (questionTags === '') {\n      displayError('questionTagsError', 'Please add at least one tag');\n      isValid = false;\n    } else {\n      if (tagArray.length > 5) {\n        displayError('questionTagsError', 'Cannot add more than 5 tags');\n        isValid = false;\n      }\n      for (const tag of tagArray) {\n        if (tag.length > 20) {\n          displayError('questionTagsError', 'Tag cannot be more than 20 characters');\n          isValid = false;\n          break;\n        }\n      }\n      if (hasDuplicates(tagArray)) {\n        displayError('questionTagsError', 'Duplicate tags not allowed');\n        isValid = false;\n      }\n    }\n    if (username === '') {\n      displayError('usernameError', 'Username cannot be empty');\n      isValid = false;\n    }\n\n    //  make the API call to post the question \n    if (isValid) {\n      try {\n        const response = await fetch('/api/questions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            title: questionTitle,\n            summary: questionSummary,\n            text: questionText,\n            tagNames: tagArray,\n            asked_by: username || 'Anonymous',\n          }),\n        });\n  \n        if (response.ok) {\n          const newQuestion = await response.json();\n          addQuestionToList(newQuestion); \n          onSuccess(); \n          setFormData({\n            questionTitle: '',\n            questionSummary: '',\n            questionText: '',\n            questionTags: '',\n            username: ''\n          });\n        } else {\n          const error = await response.json();\n          displayError('formError', error.message || 'Failed to post question. Please try again.');\n        }\n      } catch (error) {\n        console.error('Error posting question:', error);\n        displayError('formError', 'Error posting question. Please try again.');\n      }\n    }\n  };  \n\n    // check for duplicate tags\n  function hasDuplicates(array) {\n    return (new Set(array)).size !== array.length;\n  }\n\n  let questionsLinkClass = \"inactive\";\n  const handleQuestionsLinkClick = () => {\n    setActiveContent('AllQuestionList');\n    questionsLinkClass = \"active\"\n    tagsLinkClass = \"inactive\"\n  };\n\n  let tagsLinkClass = \"inactive\";\n  const handleTagsLinkClick = () => {\n    setActiveContent('TagsContent');\n    questionsLinkClass = \"inactive\"\n    tagsLinkClass = \"active\"\n  };\n\n  return (\n        <div id=\"newQuestionForm\">\n          <div id=\"menu\" className=\"menu\">\n            <ul>\n              <li>\n                <a href=\"#\" id=\"questionsLink\" className={questionsLinkClass} onClick={handleQuestionsLinkClick}>Questions</a>\n              </li>\n              <li>\n                <a href=\"#\" id=\"tagsLink\" className={tagsLinkClass} onClick={handleTagsLinkClick}>Tags</a>\n              </li>\n            </ul>\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"questionTitle\">Question Title*</label>\n            <p><span className=\"error-message\" id=\"questionTitleError\">{errorMessages.questionTitleError}</span></p>\n            <input\n              type=\"text\"\n              id=\"questionTitle\"\n              value={formData.questionTitle}\n              onChange={handleInputChange}\n              placeholder=\"Enter question title (max 100 characters)\"\n              className=\"form-input\"\n              data-hint=\"limit title to 100 characters or less\"\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"questionSummary\">Question Summary*</label>\n            <p><span className=\"error-message\" id=\"questionSummaryError\">{errorMessages.questionSummaryError}</span></p>\n            <input\n              type=\"text\"\n              id=\"questionSummary\"\n              value={formData.questionSummary}\n              onChange={handleInputChange}\n              placeholder=\"Question Summary (max 200 characters)\"\n              className=\"form-input\"\n              data-hint=\"limit summary to 200 characters or less\"\n              autoComplete=\"off\"\n              required\n            />\n            <div className=\"error-message\">{errorMessages.questionSummaryError}</div>\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"questionText\">Question Text*</label>\n            <p><span className=\"error-message\" id=\"questionTextError\">{errorMessages.questionTextError}</span></p>\n            <input\n              type=\"text\"\n              id=\"questionText\"\n              value={formData.questionText}\n              onChange={handleInputChange}\n              placeholder=\"Enter question details\"\n              className=\"form-input\"\n              data-hint=\"Add details\"\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"questionTags\">Tags*</label>\n            <p><span className=\"error-message\" id=\"questionTagsError\">{errorMessages.questionTagsError}</span></p>\n            <input\n              type=\"text\"\n              id=\"questionTags\"\n              value={formData.questionTags}\n              onChange={handleInputChange}\n              placeholder=\"Enter tags separated by whitespace\"\n              className=\"form-input\"\n              data-hint=\"Add keywords separated by whitespace\"\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n          <div className=\"form-field\">\n            <label htmlFor=\"username\">Username*</label>\n            <p><span className=\"error-message\" id=\"usernameError\">{errorMessages.usernameError}</span></p>\n            <input\n              type=\"text\"\n              id=\"username\"\n              value={formData.username}\n              readOnly \n              className=\"form-input\"\n              autoComplete=\"off\"\n              required\n            />\n          </div>\n          <button id=\"postQuestionBtn\" className=\"blue-button\" onClick={handlePostQuestion}>Post Question</button>\n          <p><span className=\"error-message\" id=\"formError\">{errorMessages.formError}</span></p>\n          <p>* indicates required fields</p>\n        </div>\n      );\n}\n\nexport default NewQuestionForm;\n\n\n","import React, { useEffect, useState } from 'react';\nimport SortingButtons from './SortingButtons';\nimport AnswerContent from './AnswerContent';\nimport NewQuestionForm from './NewQuestionForm';\nimport Cookies from 'js-cookie';\nimport '../stylesheets/App.css';\n\nfunction AllQuestionList({ isLoggedIn, activeContent, setActiveContent }) {\n  console.log(isLoggedIn)\n  const [questions, setQuestions] = useState([]);\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [displayNewQuestionForm, setDisplayNewQuestionForm] = useState(false);\n  const [displayAnswerContent, setDisplayAnswerContent] = useState(false);\n  const [currentPage, setCurrentPage] = useState(0); // Track the current page\n  const pageSize = 5; // Number of questions per page\n  const totalPages = Math.ceil(questions.length / pageSize); // Calculate total pages\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      try {\n        const response = await fetch('/api/questions');\n        if (response.ok) {\n          const data = await response.json();\n          setQuestions(data);\n          console.log(data)\n        } else {\n          console.error('Failed to fetch questions');\n          throw new Error('Could not fetch questions.');\n        }\n      } catch (error) {\n        console.error('Error fetching questions:', error);\n      }\n    };\n  \n    fetchQuestions();\n  }, []);\n\n  const handleAskQuestionClick = () => {\n    setDisplayNewQuestionForm(true);\n  };\n\n  const handleClickOnQuestion = async (question) => {\n    setDisplayAnswerContent(true);\n    setSelectedQuestion(question);\n  };\n\n  const handlePrevClick = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1); // Move to the previous page\n    }\n  };\n\n  const handleNextClick = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(currentPage + 1); // Move to the next page\n    } else {\n      setCurrentPage(0); // Wrap around to the first page if on the last page\n    }\n  };\n\n  const displayedQuestions = questions.slice(currentPage * pageSize, (currentPage + 1) * pageSize);\n\n  const formatMetadata = (date) => {\n    const currentDate = new Date();\n    const diff = currentDate - new Date(date);\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    if (days >= 365) {\n      return `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric', year: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}`;\n    } else if (days >= 1) {\n      return `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}`;\n    } else if (hours >= 1) {\n      return `${hours} hours ago`;\n    } else if (minutes >= 1) {\n      return `${minutes} minutes ago`;\n    } else {\n      return `${seconds} seconds ago`;\n    }\n  };\n\n  const setSortedQuestions = (sortedQuestions) => {\n    setQuestions(sortedQuestions);\n  };\n\n  const addQuestionToList = (newQuestion) => {\n    setQuestions(prevQuestions => [\n      { ...newQuestion, id: prevQuestions.length + 1 },\n      ...prevQuestions\n    ]);\n  };\n\n    let questionsLinkClass = \"active\";\n  const handleQuestionsLinkClick = () => {\n    setActiveContent('AllQuestionList');\n    questionsLinkClass = \"active\"\n    tagsLinkClass = \"inactive\"\n  };\n\n  let tagsLinkClass;\n  const handleTagsLinkClick = () => {\n    setActiveContent('TagsContent');\n    questionsLinkClass = \"inactive\"\n    tagsLinkClass = \"active\"\n  };\n\n  return (\n    <div id=\"questionList\" style={{ minHeight: '400px' }}>\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" id=\"questionsLink\" className=\"active\" onClick={handleQuestionsLinkClick}>Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" id=\"tagsLink\" className=\"inactive\" onClick={handleTagsLinkClick}>Tags</a>\n          </li>\n        </ul>\n      </div>\n      {displayNewQuestionForm ? (\n        <NewQuestionForm\n          activeContent={activeContent} setActiveContent={setActiveContent}\n          addQuestionToList={addQuestionToList}\n          onSuccess={() => {\n            setDisplayNewQuestionForm(false);\n            setActiveContent('AllQuestionList');\n          }}\n        />\n      ) : displayAnswerContent && selectedQuestion ? (\n        <AnswerContent\n          question={selectedQuestion}\n          onAskQuestionClick={handleAskQuestionClick} \n          disabled={!isLoggedIn}\n        />\n      ) : (\n        <>\n          <div className=\"header-row\" id=\"header-row\">\n            <h2 id=\"allQuestionTitle\" className=\"title\">All Questions</h2>\n            {isLoggedIn && (\n              <button id=\"askQuestionBtn\" className=\"blue-button\" onClick={handleAskQuestionClick}>Ask Question</button>\n            )}\n          </div>\n          <div className=\"button-row\" id=\"button-row\">\n            <p id=\"totalNumQues\" className=\"button-text\">\n              <span id=\"totalQuestions\">{questions.length}</span> questions\n            </p>\n            <SortingButtons setSortedQuestions={setSortedQuestions} />\n          </div>\n          <div id=\"allQuestionList\" style={{ overflowY: 'auto' }}>\n            {questions.length === 0 ? (\n              <p>No questions found.</p>\n            ) : (\n              displayedQuestions.map(question => (\n                <div key={question._id} className=\"question-entry\" onClick={() => handleClickOnQuestion(question)}>\n                  <div className=\"title-row\" style={{ display: 'flex', alignItems: 'center' }}>\n                    <div className=\"answer-views\" style={{ paddingRight: '15px' }}>\n                      <p className=\"grey-text\">Answers: {question.answers?.length || 0}</p>\n                      <p className=\"grey-text\">Views: {question.views}</p>\n                    </div>\n                    <h2 className=\"blue-text\">{question.title}</h2>\n                    <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}>\n                      <p className=\"red-text\">{question.asked_by}</p>\n                      <p className=\"grey-text\">asked {formatMetadata(question.ask_date_time)}</p>\n                    </div>\n                  </div>\n                  <p className=\"question-summary\">{question.summary}</p>\n                  <div className=\"tag-containerQuest\">\n                    {question.tags?.map(tag => (\n                      <span key={tag._id} className=\"tag\">\n                        {tag.name}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              ))\n            )}\n            {totalPages > 1 && (\n            <div className=\"pagination-controls\" style={{ textAlign: 'center', paddingTop: '10px' }}>\n              <button\n                onClick={handlePrevClick}\n                disabled={currentPage === 0} // Disable if on the first page\n              >\n                Prev\n              </button>\n              <span>Page {currentPage + 1} of {totalPages}</span> {/* Page count display */}\n              <button\n                onClick={handleNextClick}\n                disabled={currentPage === totalPages - 1} // Disable if on the last page\n              >\n                Next\n              </button>\n            </div>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AllQuestionList;\n\n","import React, { useEffect, useState } from 'react';\nimport AnswerContent from './AnswerContent';\nimport '../stylesheets/App.css';\nimport Cookies from 'js-cookie';\n\nfunction TagResults({ isLoggedIn, tagName, activeContent, setActiveContent }) {\n    const [questions, setQuestions] = useState([]);\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\n    const [displayAnswerContent, setDisplayAnswerContent] = useState(false);\n\n    useEffect(() => {\n        const fetchQuestionsByTag = async () => {\n            try {\n                const response = await fetch(`/api/questions/tag/${tagName}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                setQuestions(data);\n            } catch (error) {\n                console.error('Error fetching questions for tag:', error);\n            }\n        };\n\n        fetchQuestionsByTag();\n    }, [tagName]);\n\n    const formatMetadata = (date) => {\n        const currentDate = new Date();\n        const diff = currentDate - date;\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days >= 365) {\n            return `${date.toLocaleString('en-us', { month: 'short', day: 'numeric', year: 'numeric' })} at ${date.toLocaleTimeString('en-us')}`;\n        } else if (days >= 1) {\n            return `${date.toLocaleString('en-us', { month: 'short', day: 'numeric' })} at ${date.toLocaleTimeString('en-us')}`;\n        } else if (hours >= 1) {\n            return `${hours} hours ago`;\n        } else if (minutes >= 1) {\n            return `${minutes} minutes ago`;\n        } else {\n            return `${seconds} seconds ago`;\n        }\n    };\n\n    const handleClickOnQuestion = (question) => {\n        setDisplayAnswerContent(true);\n        setSelectedQuestion(question); \n    };\n\n    return (\n        <div id=\"tagResults\">\n            {displayAnswerContent && selectedQuestion ? (\n                <AnswerContent question={selectedQuestion} />\n            ) : (\n                <>\n                    <h2 id=\"tagResultsTitle\">[{tagName}] Tag Results</h2>\n                    {questions.length === 0 ? (\n                        <p>No questions found for tag {tagName}.</p>\n                    ) : (\n                        questions.map(question => (\n                            <div key={question._id} className=\"question-entry\">\n                                <div onClick={() => {\n                                    setDisplayAnswerContent(true);\n                                    setSelectedQuestion(question);\n                                }}>\n                                    <h3>{question.title}</h3>\n                                </div>\n                            </div>\n                        ))\n                    )}\n                </>\n            )}\n        </div>\n    );\n}\n\nexport default TagResults;\n\n","\n\nimport React, { useState, useEffect } from 'react';\nimport NewQuestionForm from './NewQuestionForm'; \nimport TagResults from './TagResults';\nimport '../stylesheets/App.css';\n\nfunction Tags({ isLoggedIn, activeContent, setActiveContent }) {\n    const [tags, setTags] = useState([]);\n    const [displayNewQuestionForm, setDisplayNewQuestionForm] = useState(false);\n    const [selectedTag, setSelectedTag] = useState(null);\n    const [displayTagResult, setDisplayTagResult] = useState(false);\n        const setQuestions = useState([])[1];\n\n    useEffect(() => {\n        const fetchTags = async () => {\n            try {\n                const response = await fetch('/api/tags');\n                if (!response.ok) {\n                    throw new Error('Failed to fetch tags');\n                }\n                const fetchedTags = await response.json();\n                setTags(fetchedTags);\n            } catch (error) {\n                console.error('Error fetching tags:', error);\n            }\n        };\n\n        fetchTags();\n    }, []);\n\n    const handleAskQuestionClick = () => {\n        setDisplayNewQuestionForm(true); \n    };\n\n    const handleTagLinkClick = (tagName) => {\n        console.log(\"tag link clicked: \" + tagName);\n        setDisplayTagResult(true);\n        setSelectedTag(tagName); \n    };\n\n    // Function to add a new question to the list\n    const addQuestionToList = (newQuestion) => {\n        setQuestions(prevQuestions => [\n            { ...newQuestion, id: prevQuestions.length + 1 }, // Ensure each question has a unique ID\n            ...prevQuestions\n        ]);\n    };\n\n    let questionsLinkClass = \"inactive\";\n    const handleQuestionsLinkClick = () => {\n        setActiveContent('AllQuestionList');\n        questionsLinkClass = \"active\"\n        tagsLinkClass = \"inactive\"\n    };\n\n    let tagsLinkClass = \"active\";\n    const handleTagsLinkClick = () => {\n        setActiveContent('TagsContent');\n        questionsLinkClass = \"inactive\"\n        tagsLinkClass = \"active\"\n    };\n\n    return (\n        <div id=\"tag-container\">\n            <div id=\"menu\" className=\"menu\">\n                <ul>\n                    <li>\n                        <a href=\"#questions\" id=\"questionsLink\" className={activeContent === 'AllQuestionList' ? \"active\" : \"inactive\"} onClick={handleQuestionsLinkClick}>\n                            Questions\n                        </a>\n                    </li>\n                    <li>\n                        <a href=\"#tags\" id=\"tagsLink\" className={activeContent === 'TagsContent' ? \"active\" : \"inactive\"} onClick={handleTagsLinkClick}>\n                            Tags\n                        </a>\n                    </li>\n                </ul>\n            </div>\n            {displayNewQuestionForm ? (\n                <NewQuestionForm\n                    setActiveContent={setActiveContent}\n                    onSuccess={() => {\n                        setDisplayNewQuestionForm(false);\n                        setActiveContent('AllQuestionList');\n                    }}\n                />\n            ) : (\n                <>\n                    <div className=\"header-row\" id=\"header-row\">\n                        <h2 id=\"allQuestionTitle\" className=\"title\">All Tags</h2>\n                        {isLoggedIn && (<button id=\"askQuestionBtn\" className=\"blue-button\" onClick={() => setDisplayNewQuestionForm(true)}>\n                            Ask Question\n                        </button>)}\n                    </div>\n                    <div className=\"tag-header-row\" id=\"tag-header-row\">\n                        <p id=\"totalNumTags\" className=\"button-text\">\n                            <span id=\"totalQuestions\">{tags.length}</span> tags\n                        </p>\n                    </div>\n                    <div className=\"tag-container-table\">\n                        {tags.map(tag => (\n                            <div key={tag.name} className=\"tag-box\">\n                                <a href=\"#tag\" className=\"tag-link\" onClick={() => {\n                                    setDisplayTagResult(true);\n                                    setSelectedTag(tag.name);\n                                }}>{tag.name}</a>\n                                <span className=\"num-questions\">{tag.count || 0} questions</span>\n                            </div>\n                        ))}\n                    </div>\n                    {displayTagResult && selectedTag && (\n                        <TagResults tagName={selectedTag} />\n                    )}\n                </>\n            )}\n        </div>\n    );    \n}\n\nexport default Tags;\n\n\n\n\n\n","import React, { useEffect, useState } from 'react';\nimport SortingButtons from './SortingButtons';\nimport AnswerContent from './AnswerContent';\nimport NewQuestionForm from './NewQuestionForm';\nimport '../stylesheets/App.css';\nimport Cookies from 'js-cookie';\n\nfunction Searching({ isLoggedIn, searchResults, activeContent, setActiveContent }) {\n    const [questions, setQuestions] = useState([]);\n    const [selectedQuestion, setSelectedQuestion] = useState(null);\n    const [displayNewQuestionForm, setDisplayNewQuestionForm] = useState(false);\n    const [displayAnswerContent, setDisplayAnswerContent] = useState(false);\n    const [currentPage, setCurrentPage] = useState(0); // Track the current page\n    const pageSize = 5; // Number of questions per page\n    const totalPages = Math.ceil(searchResults.length / pageSize); // Calculate total pages\n\n    const setSortedQuestions = (sortedQuestions) => {\n      setQuestions(sortedQuestions);\n    };\n\n    useEffect(() => {\n      const fetchSearchResults = async () => {\n          const searchTerm = 'example';  \n          try {\n              const response = await fetch(`/api/search?searchTerm=${encodeURIComponent(searchTerm)}`);\n              if (response.ok) {\n                  const data = await response.json();\n                  setQuestions(data);\n              } else {\n                  throw new Error('Failed to fetch search results');\n              }\n          } catch (error) {\n              console.error('Error fetching search results:', error);\n          }\n      };\n  \n      fetchSearchResults();\n  }, []); \n  \n    const formatMetadata = (date) => {\n        const currentDate = new Date();\n        const diff = currentDate - new Date(date);\n        const seconds = Math.floor(diff / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        return days >= 365 ? `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric', year: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}` :\n               days >= 1 ? `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}` :\n               hours >= 1 ? `${hours} hours ago` :\n               minutes >= 1 ? `${minutes} minutes ago` :\n               `${seconds} seconds ago`;\n    };\n\n    const handleAskQuestionClick = () => {\n        setDisplayNewQuestionForm(true);\n    };\n\n    const handleClickOnQuestion = async (question) => {\n        setDisplayAnswerContent(true);\n        setSelectedQuestion(question);\n      };\n\n      const handlePrevClick = () => {\n        if (currentPage > 0) {\n          setCurrentPage(currentPage - 1); // Move to the previous page\n        }\n      };\n    \n      const handleNextClick = () => {\n        if (currentPage < totalPages - 1) {\n          setCurrentPage(currentPage + 1); // Move to the next page\n        } else {\n          setCurrentPage(0); // Wrap around to the first page if on the last page\n        }\n      };\n\n      searchResults = searchResults.slice(currentPage * pageSize, (currentPage + 1) * pageSize);\n\n      const addQuestionToList = (newQuestion) => {\n        setQuestions(prevQuestions => [\n          { ...newQuestion, id: prevQuestions.length + 1 },\n          ...prevQuestions\n        ]);\n      };\n\n    return (\n        <div id=\"Searching\">\n            <div id=\"menu\" className=\"menu\">\n                <ul>\n                    <li>\n                        <a href=\"#\" className=\"active\" onClick={() => setActiveContent('AllQuestionList')}>Questions</a>\n                    </li>\n                    <li>\n                        <a href=\"#\" className=\"inactive\" onClick={() => setActiveContent('TagsContent')}>Tags</a>\n                    </li>\n                </ul>\n            </div>\n            {displayNewQuestionForm ? (\n                <NewQuestionForm\n                    activeContent={activeContent}\n                    setActiveContent={setActiveContent}\n                    onSuccess={() => {\n                        setDisplayNewQuestionForm(false);\n                        setActiveContent('AllQuestionList');\n                    }}\n                />\n            ) : displayAnswerContent && selectedQuestion ? (\n                <AnswerContent question={selectedQuestion} onAskQuestionClick={handleAskQuestionClick}/>\n            ) : (\n                <>\n                    <div className=\"header-row\">\n                        <h2 className=\"title\">Search Results</h2>\n                        {isLoggedIn && (<button className=\"blue-button\" onClick={handleAskQuestionClick} disabled={!isLoggedIn}>Ask Question</button>)}\n                    </div>\n                    <div className=\"button-row\">\n                        <p className=\"button-text\">\n                            <span>{searchResults.length}</span> questions\n                        </p>\n                        <SortingButtons setSortedQuestions={setSortedQuestions} />\n                    </div>\n                    <div id=\"allQuestionList\">\n                        {searchResults.length === 0 ? (\n                            <p>No questions found.</p>\n                        ) : (\n                            searchResults.map((question) => (\n                                    <div key={question._id} className=\"question-entry\" onClick={() => handleClickOnQuestion(question)}>\n                                      <div className=\"title-row\" style={{ display: 'flex', alignItems: 'center' }}>\n                                        <div className=\"answer-views\" style={{ paddingRight: '15px' }}>\n                                          <p className=\"grey-text\">Answers: {question.answers?.length || 0}</p>\n                                          <p className=\"grey-text\">Views: {question.views}</p>\n                                        </div>\n                                        <h2 className=\"blue-text\">{question.title}</h2>\n                                        <div style={{ marginLeft: 'auto', display: 'flex', alignItems: 'center' }}>\n                                          <p className=\"red-text\">{question.asked_by}</p>\n                                          <p className=\"grey-text\">asked {formatMetadata(question.ask_date_time)}</p>\n                                        </div>\n                                      </div>\n                                      <p className=\"question-summary\">{question.summary}</p>\n                                      <div className=\"tag-containerQuest\">\n                                        {question.tags?.map(tag => (\n                                          <span key={tag._id} className=\"tag\">\n                                            {tag.name}\n                                          </span>\n                                        ))}\n                                      </div>\n                                    </div>\n                                  ))\n                                )}\n                                {totalPages > 1 && (\n                                <div className=\"pagination-controls\" style={{ textAlign: 'center', paddingTop: '10px' }}>\n                                  <button\n                                    onClick={handlePrevClick}\n                                    disabled={currentPage === 0} // Disable if on the first page\n                                  >\n                                    Prev\n                                  </button>\n                                  <span>Page {currentPage + 1} of {totalPages}</span> {/* Page count display */}\n                                  <button\n                                    onClick={handleNextClick}\n                                    disabled={currentPage === totalPages - 1} // Disable if on the last page\n                                  >\n                                    Next\n                                  </button>\n                                </div>\n                                )}\n                              </div>\n                            </>\n                          )}\n                        </div>\n                      );\n                    }\n                    \n\nexport default Searching;","import React, { useEffect, useState } from 'react';\n\nfunction WelcomePage({ setActiveContent }) {\n  return (\n    <div id=\"welcomePage_Content\" style={{ minHeight: '400px' }}>\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" className=\"inactive\">Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"inactive\">Tags</a>\n          </li>\n        </ul>\n      </div>\n      <div>\n        <h1>Welcome to Fake Stack Overflow!</h1>\n        <button onClick={() => setActiveContent('Register')} className=\"sorting-button\">Create Account</button> {/* Switch to Register */}\n        <button onClick={() => setActiveContent('Login')} className=\"sorting-button\">Login</button> {/* Switch to Login */}\n        <button onClick={() => setActiveContent('AllQuestionList')} className=\"sorting-button\">Continue as Guest</button> {/* Continue as guest */}\n      </div>\n    </div>\n  );\n}\n\nexport default WelcomePage;\n","import React, { useState } from 'react';\nimport Cookies from 'js-cookie';\n\nfunction LoginForm({ onLoginSuccess, setActiveContent }) {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n  \n    try {\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ email, password }), // Pass email and password\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message);\n      }\n  \n      const data = await response.json(); // Get token and email\n      const token = data.token;\n  \n      // Save JWT token and email to cookies\n      Cookies.set('authToken', token, { expires: 7, path: '/' });\n      Cookies.set('userEmail', email, { expires: 7, path: '/' }); // Email should be saved correctly\n  \n      onLoginSuccess();\n      setActiveContent('AllQuestionList');\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  const handleBackClick = () => {\n    setActiveContent('WelcomePage'); // Back to WelcomePage\n  };\n\n  return (\n    <div id=\"login\" className=\"login-form\">\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" className=\"inactive\">Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"inactive\">Tags</a>\n          </li>\n        </ul>\n      </div>\n      <div className=\"header-row\">\n        <h2>Login</h2>\n        <button onClick={handleBackClick} className=\"sorting-button\">Back</button> {/* Back button to navigate */}\n      </div>\n      <form onSubmit={handleLogin}> {/* Trigger handleLogin on form submit */}\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          placeholder=\"Email (Username)\"\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          placeholder=\"Password\"\n          required\n        />\n        <button type=\"submit\" className=\"blue-button\">Login</button> {/* Submit triggers handleLogin */}\n      </form>\n      {error && <div style={{ color: 'red' }}>{error}</div>} {/* Display error message if any */}\n    </div>\n  );\n}\n\nexport default LoginForm;\n","import React, { useState } from 'react';\n\nfunction RegisterForm({ onRegisterSuccess, setActiveContent }) {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: '',\n    passwordVerification: '',\n  });\n\n  const [error, setError] = useState('');\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n  };\n\n  const validateForm = () => {\n    const { firstName, lastName, email, password, passwordVerification } = formData;\n\n    if (!email.match(/^[\\w-.]+@([\\w-]+\\.)+[\\w-]{2,4}$/)) {\n      return 'Invalid email format.';\n    }\n\n    if (password.includes(firstName) || password.includes(lastName) || password.includes(email)) {\n      return 'Password cannot contain your name or email.';\n    }\n\n    if (password !== passwordVerification) {\n      return 'Passwords do not match.';\n    }\n\n    return null;\n  };\n\n  const handleBackClick = () => {\n    setActiveContent('WelcomePage'); // Back to WelcomePage\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const validationError = validateForm();\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n\n    try {\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(formData),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        if (response.status === 409) {\n          setError('Email already in use. Please use a different email.');\n        } else {\n          const errorData = await response.json(); // Get detailed error message\n          console.log(errorData);\n          throw new Error('Failed to register.');\n        }\n        return;\n      }\n\n      console.log(\"successful creation\")\n      onRegisterSuccess();\n      console.log(\"parent notified of sucess\")\n      setActiveContent('Login'); // After registration, go to Login\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n\n  return (\n    <div id=\"registerForm\" className=\"login-form\">\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" className=\"inactive\">Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" className=\"inactive\">Tags</a>\n          </li>\n        </ul>\n      </div>\n      <div className=\"header-row\">\n        <h2>Register</h2>\n        <button onClick={handleBackClick} className=\"sorting-button\">Back</button>\n      </div>\n      <form onSubmit={handleSubmit} >\n        <input\n          type=\"text\"\n          name=\"firstName\"\n          value={formData.firstName}\n          onChange={handleChange}\n          placeholder=\"First Name\"\n          required\n        />\n        <input\n          type=\"text\"\n          name=\"lastName\"\n          value={formData.lastName}\n          onChange={handleChange}\n          placeholder=\"Last Name\"\n          required\n        />\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          placeholder=\"Email (Username)\"\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          placeholder=\"Secret Password\"\n          required\n        />\n        <input\n          type=\"password\"\n          name=\"passwordVerification\"\n          value={formData.passwordVerification}\n          onChange={handleChange}\n          placeholder=\"Verify Password\"\n          required\n        />\n        <button type=\"submit\" className=\"blue-button\">Sign Up</button>\n      </form>\n      {error && <div style={{ color: 'red' }}>{error}</div>}\n    </div>\n  );\n}\n\nexport default RegisterForm;\n","import React, { useEffect, useState } from 'react';\nimport Cookies from 'js-cookie';\n\nfunction UserProfilePage({ userId, setActiveContent, setSelectedQuestion, setSelectedAnswer }) {\n  const [user, setUser] = useState(null);\n  const [questions, setQuestions] = useState([]);\n  const [tags, setTags] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  \n  const userEmail = Cookies.get('userEmail'); // Fetch email from cookies\n  console.log('User Email:', userEmail); // Debug statement to ensure correct retrieval\n\n  useEffect(() => {\n    if (!userEmail) {\n      console.error(\"User email is undefined\");\n      return;\n    }\n\n    const fetchUserProfile = async () => {\n      try {\n        console.log('Fetching user data from:', `/api/user/${encodeURIComponent(userEmail)}`);\n        const response = await fetch(`/api/user/${encodeURIComponent(userEmail)}`);\n        console.log(\"response:\", response)\n        if (response.ok) {\n          const data = await response.json();\n          console.log('User Data:', data);\n          setUser(data.user);\n          setQuestions(data.questions);\n          setTags(data.tags);\n          setAnswers(data.answers);\n        } else {\n          console.error('Failed to fetch user data');\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n\n    fetchUserProfile();\n  }, [userEmail]);\n\n  const handleDeleteQuestion = async (questionId) => {\n    try {\n      const response = await fetch(`/api/questions/${questionId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setQuestions((prevQuestions) => prevQuestions.filter((q) => q._id !== questionId));\n      } else {\n        throw new Error('Failed to delete question');\n      }\n    } catch (error) {\n      console.error('Error deleting question:', error);\n    }\n  };\n\n  let questionsLinkClass = \"inactive\";\n  const handleQuestionsLinkClick = () => {\n    setActiveContent('AllQuestionList');\n    questionsLinkClass = \"active\"\n    tagsLinkClass = \"inactive\"\n  };\n\n  let tagsLinkClass = \"inactive\";\n  const handleTagsLinkClick = () => {\n    setActiveContent('TagsContent');\n    questionsLinkClass = \"inactive\"\n    tagsLinkClass = \"active\"\n  };\n\n  const handleDeleteAnswer = async (answerId) => {\n    try {\n      const response = await fetch(`/api/answers/${answerId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setAnswers((prevAnswers) => prevAnswers.filter((a) => a._id !== answerId));\n      } else {\n        console.error('Failed to delete answer');\n      }\n    } catch (error) {\n      console.error('Error deleting answer:', error);\n    }\n  };\n\n  const handleDeleteTag = async (tagId) => {\n    try {\n      const response = await fetch(`/api/tags/${tagId}`, {\n        method: 'DELETE',\n      });\n\n      if (response.ok) {\n        setTags((prevTags) => prevTags.filter((t) => t._id !== tagId));\n      } else {\n        throw new Error('Failed to delete tag');\n      }\n    } catch (error) {\n      console.error('Error deleting tag:', error);\n    }\n  };\n\n  if (!user) {\n    return (\n      <div>\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" id=\"questionsLink\" className=\"inactive\" onClick={handleQuestionsLinkClick}>Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" id=\"tagsLink\" className=\"inactive\" onClick={handleTagsLinkClick}>Tags</a>\n          </li>\n        </ul>\n      </div>\n    <div>User not found</div>\n    </div>\n    );\n  }\n\n  const formatMetadata = (date) => {\n    const currentDate = new Date();\n    const diff = currentDate - new Date(date);\n    const seconds = Math.floor(diff / 1000);\n    const minutes = Math.floor(seconds / 60);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n    if (days >= 365) {\n      return `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric', year: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}`;\n    } else if (days >= 1) {\n      return `${new Date(date).toLocaleString('en-us', { month: 'short', day: 'numeric' })} at ${new Date(date).toLocaleTimeString('en-us')}`;\n    } else if (hours >= 1) {\n      return `${hours} hours ago`;\n    } else if (minutes >= 1) {\n      return `${minutes} minutes ago`;\n    } else {\n      return `${seconds} seconds ago`;\n    }\n  };\n\n  const hasQuestions = questions.length > 0;\n  const hasTags = tags.length > 0;\n  const hasAnswers = answers.length > 0;\n\n  return (\n    <div className=\"user-profile\">\n      <div id=\"menu\" className=\"menu\">\n        <ul>\n          <li>\n            <a href=\"#\" id=\"questionsLink\" className=\"inactive\" onClick={handleQuestionsLinkClick}>Questions</a>\n          </li>\n          <li>\n            <a href=\"#\" id=\"tagsLink\" className=\"inactive\" onClick={handleTagsLinkClick}>Tags</a>\n          </li>\n        </ul>\n      </div>\n      <h1>{user.firstName} {user.lastName}</h1>\n      <p>Email: {userEmail}</p> {/* Display email address */}\n      \n      {/* Membership section */}\n      <h2>Membership</h2>\n      <p>Member since: {formatMetadata(user.createdAt)}</p>\n      <p>Reputation: {user.reputation || 0}</p>\n\n      {/* Questions section */}\n      <h2>Questions Posted</h2>\n      {!hasQuestions ? (\n        <p>No data found for {user.firstName} {user.lastName}.</p>\n      ) : (\n        <ul>\n          {questions.map((q) => (\n            <li key={q._id}>\n              <span\n                onClick={() => {\n                  setSelectedQuestion(q._id); // Set the selected question\n                  setActiveContent('EditQuestion'); // Navigate to edit question page\n                }}\n              >\n                {q.title}\n              </span>\n              <button onClick={() => handleDeleteQuestion(q._id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {/* Tags section */}\n      <h2>Tags</h2>\n      {!hasTags ? (\n        <p>No data found for {user.firstName} {user.lastName}.</p>\n      ) : (\n        <ul>\n          {tags.map((t) => (\n            <li key={t._id}>\n              <span>{t.name}</span>\n              <button onClick={() => handleDeleteTag(t._id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {/* Answers section */}\n      <h2>Answers</h2>\n      {!hasAnswers ? (\n        <p>No data found for {user.firstName} {user.lastName}.</p>\n      ) : (\n        <ul>\n          {answers.map((a) => (\n            <li key={a._id}>\n              <span\n                onClick={() => {\n                  setSelectedAnswer(a._id); // Set the selected answer\n                  setActiveContent('EditAnswer'); // Navigate to edit answer page\n                }}\n              >\n                {a.questionTitle}\n              </span>\n              <button onClick={() => handleDeleteAnswer(a._id)}>Delete</button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nexport default UserProfilePage;\n","import React, { useState, useEffect } from 'react';\nimport Cookies from 'js-cookie';\nimport Banner from './Banner';\nimport AllQuestionList from './AllQuestionList';\nimport NewQuestionForm from './NewQuestionForm';\nimport Answers from './AnswerForm';\nimport TagsContent from './TagsContent';\nimport Searching from './Searching';\nimport WelcomePage from './WelcomePage';\nimport LoginPage from './LoginForm';\nimport RegisterPage from './RegisterForm';\nimport UserProfile from './UserProfilePage';\n\nfunction FakeStackOverflow() {\n  const [activeContent, setActiveContent] = useState('WelcomePage');\n  const [searchResults, setSearchResults] = useState([]); // State to store search results\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // State to track login status\n  const [isLoggedOut, setIsLoggedOut] = useState(false);\n\n  useEffect(() => {\n    const userSession = Cookies.get('userSession');\n    if (userSession) {\n      setIsLoggedIn(true);\n      setActiveContent('AllQuestionList'); // Redirect to question list\n    } else if (isLoggedOut) {\n      setActiveContent('WelcomePage'); // Redirect to welcome page on logout\n    }\n  }, [isLoggedOut]); // Dependency on isLoggedOut to trigger change on logout\n\n  const handleLoginSuccess = () => {\n    setIsLoggedIn(true);\n    setActiveContent('AllQuestionList'); // Redirect to question list on successful login\n  };\n\n  const handleRegisterSuccess = () => {\n    setActiveContent('Login'); // Redirect to login after successful registration\n  };\n\n  const handleLogoutSuccess = () => {\n    setIsLoggedIn(false);\n    setIsLoggedOut(true); // Set the logout state to true\n  };\n\n  const renderContent = () => {\n    switch (activeContent) {\n      case 'WelcomePage' :\n        return <WelcomePage  activeContent={activeContent} setActiveContent={setActiveContent}/>;\n      case 'UserProfile' :\n        return <UserProfile  activeContent={activeContent} setActiveContent={setActiveContent}/>;\n      case 'AllQuestionList':\n        return <AllQuestionList isLoggedIn={isLoggedIn} activeContent={activeContent} setActiveContent={setActiveContent} searchResults={searchResults} />;\n      case 'NewQuestionForm':\n        return <NewQuestionForm activeContent={activeContent} setActiveContent={setActiveContent} searchResults={searchResults} />;\n      case 'Answers':\n        return <Answers  activeContent={activeContent} setActiveContent={setActiveContent} searchResults={searchResults} />;\n      case 'TagsContent':\n        return <TagsContent isLoggedIn={isLoggedIn} activeContent={activeContent} setActiveContent={setActiveContent} searchResults={searchResults} />;\n      case 'Searching':\n        return <Searching isLoggedIn={isLoggedIn} activeContent={activeContent} setActiveContent={setActiveContent} searchResults={searchResults} setSearchResults={setSearchResults} />;\n      case 'Login' :\n        return <LoginPage  onLoginSuccess={handleLoginSuccess} activeContent={activeContent} setActiveContent={setActiveContent} />;\n      case 'Register' :\n        return <RegisterPage  onRegisterSuccess={handleRegisterSuccess} activeContent={activeContent} setActiveContent={setActiveContent} />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"fakestackoverflow\">\n      <Banner  isLoggedIn={isLoggedIn} onLogoutSuccess={handleLogoutSuccess} activeContent={activeContent} setSearchResults={setSearchResults} setActiveContent={setActiveContent} />\n      <div className=\"content\">\n        {renderContent()}\n      </div>\n    </div>\n  );\n}\n\nexport default FakeStackOverflow;","// ************** THIS IS YOUR APP'S ENTRY POINT. CHANGE THIS FILE AS NEEDED. **************\n// ************** DEFINE YOUR REACT COMPONENTS in ./components directory **************\nimport './stylesheets/App.css';\nimport FakeStackOverflow from './components/fakestackoverflow.js'\nimport React, { useEffect, useState } from 'react';\n\nfunction App() {\n  return (\n    <section className=\"fakeso\">\n      <FakeStackOverflow />\n    </section>\n  );\n}\n\nexport default App;\n","// ********************* DO NOT CHANGE THIS FILE *********************\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './stylesheets/index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n);\n"],"sourceRoot":""}